<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{CBA3FE59-AFB8-4EAA-9FF1-54A36BD65C01}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Z.Collections</RootNamespace>
    <AssemblyName>Z.Collections</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <DocumentationFile>bin\Debug\Z.Collections.XML</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'RELEASE NET40|AnyCPU'">
    <OutputPath>bin\RELEASE NET40\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'RELEASE NET45|AnyCPU'">
    <OutputPath>bin\RELEASE NET45\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="System.Collections.Generic.IList[T]\IList[T].Shuffle.cs" />
    <Compile Include="System.Collections.Generic.IList[T]\IList[T].Swap.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].AddIf.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].AddIfNotContains.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].AddRange.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].AddRangeIf.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].AddRangeIfNotContains.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].ContainsAll.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].ContainsAny.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].IsEmpty.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].IsNotEmpty.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].IsNotNullOrEmpty.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].IsNullOrEmpty.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveIf.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveIfContains.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveRange.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveRangeIf.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveRangeIfContains.cs" />
    <Compile Include="System.Collections.Generic.ICollection[T]\ICollection[T].RemoveWhere.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[string, object]\IDictionary[string, object].ToExpando.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[string, string]\IDictionary[string, string].ToNameValueCollection.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].AddIfNotContainsKey.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].AddOrUpdate.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].ContainsAllKey.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].ContainsAnyKey.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].GetOrAdd.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].RemoveIfContainsKey.cs" />
    <Compile Include="System.Collections.Generic.IDictionary[TKey, TValue]\IDictionary[Tkey, TValue].ToSortedDictionary.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[IEnumerable[T]]\IEnumerable[IEnumerable[T]].MergeDistinctInnerEnumerable.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[IEnumerable[T]]\IEnumerable[IEnumerable[T]].MergeInnerEnumerable.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].ContainsAll.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].ContainsAny.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].ForEach.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].IsEmpty.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].IsNotEmpty.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].IsNotNullOrEmpty.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].IsNullOrEmpty.cs" />
    <Compile Include="System.Collections.Generic.IEnumerable[T]\IEnumerable[T].StringJoin.cs" />
    <Compile Include="System.Collections.IDictionary\IDictionary.ToHashtable.cs" />
    <Compile Include="System.Collections.Specialized.NameValueCollection\NameValueCollection.ToDictionary.cs" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>